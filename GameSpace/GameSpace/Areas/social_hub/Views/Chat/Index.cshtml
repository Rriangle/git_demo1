@{
    ViewData["Title"] = "SignalR Floating Chat";
}

<link href="~/lib/social_hub/chat.css" rel="stylesheet" />

<div class="chat-container">
    <!-- 視窗控制 -->
    <div class="chat-header">
        <button class="minimize">–</button>
        <button class="maximize">⬜</button>
        <button class="close">×</button>
    </div>

    <div class="chat-window">
        <!-- 登入區 -->
        <div id="loginArea">
            <h3 style="text-align:center;margin-bottom:10px;">聊天室登入</h3>
            <input id="userNameInput" placeholder="輸入你的名字" />
            <button id="loginBtn">登入聊天室</button>
        </div>

        <!-- 聊天區 -->
        <div id="chatArea" style="display:none;">
            <div class="messages" id="messages"></div>
            <form id="chatForm" class="input-form">
                <input type="text" id="messageInput" placeholder="輸入訊息..." autocomplete="off" />
                <button type="submit">送出</button>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.7/signalr.min.js"></script>
    <script>
        let userName = "";
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/social_hub/chatHub")
            .build();

        const messagesDiv = document.getElementById("messages");
        const chatArea = document.getElementById("chatArea");
        const loginArea = document.getElementById("loginArea");

        connection.on("ReceiveMessage", (user, message, time) => {
            const cssClass = user === userName ? "mine" : "other";
            const msgHtml = `<div class="message ${cssClass}">
                                <div class="content">${message}</div>
                                <div class="time">${time}</div>
                             </div>`;
            messagesDiv.innerHTML += msgHtml;
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        });

        connection.start().catch(err => console.error(err));

        document.getElementById("loginBtn").addEventListener("click", () => {
            const name = document.getElementById("userNameInput").value.trim();
            if(name === "") return;
            userName = name;
            connection.invoke("RegisterUser", userName).catch(err => console.error(err));
            loginArea.style.display = "none";
            chatArea.style.display = "flex";
        });

        document.getElementById("chatForm").addEventListener("submit", e => {
            e.preventDefault();
            const msg = document.getElementById("messageInput").value.trim();
            if(msg === "") return;
            connection.invoke("SendMessage", msg).catch(err => console.error(err));
            document.getElementById("messageInput").value = "";
        });

        // 拖曳修正
        let chatContainer = document.querySelector(".chat-container");
        let dragX=0, dragY=0, isDragging=false;

        chatContainer.addEventListener("mousedown", e=>{
            if(e.target.tagName==="BUTTON") return;
            isDragging=true;
            chatContainer.classList.add("dragging");
            dragX=e.clientX;
            dragY=e.clientY;
        });

        document.addEventListener("mousemove", e=>{
            if(!isDragging) return;
            let dx=e.clientX-dragX;
            let dy=e.clientY-dragY;
            dragX=e.clientX;
            dragY=e.clientY;
            let currentTransform=chatContainer.style.transform||"translate(0px,0px)";
            let match=currentTransform.match(/translate\(([-\d.]+)px,\s*([-\d.]+)px\)/);
            let curX = match ? parseFloat(match[1]) : 0;
            let curY = match ? parseFloat(match[2]) : 0;
            chatContainer.style.transform = `translate(${curX+dx}px,${curY+dy}px)`;
        });

        document.addEventListener("mouseup", ()=>{
            if(isDragging){
                isDragging=false;
                chatContainer.classList.remove("dragging");
            }
        });

        // 窗口控制
        const minimizeBtn = document.querySelector(".chat-header .minimize");
        const maximizeBtn = document.querySelector(".chat-header .maximize");
        const closeBtn = document.querySelector(".chat-header .close");

        let isMaximized=false;
        minimizeBtn.addEventListener("click", ()=> {
            chatArea.style.display = chatArea.style.display === "none" ? "flex" : "none";
        });

        maximizeBtn.addEventListener("click", ()=>{
            if(!isMaximized){
                chatContainer.style.top="0";
                chatContainer.style.left="0";
                chatContainer.style.width="100%";
                chatContainer.style.height="100vh";
                chatContainer.style.bottom="auto";
                chatContainer.style.right="auto";
            }else{
                chatContainer.style.width="400px";
                chatContainer.style.height="500px";
                chatContainer.style.bottom="20px";
                chatContainer.style.right="20px";
                chatContainer.style.top="auto";
                chatContainer.style.left="auto";
            }
            isMaximized=!isMaximized;
        });

        closeBtn.addEventListener("click", ()=>{
            chatContainer.style.display="none";
        });
    </script>
}
